// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String  @id @default(uuid())
  username    String
  email       String  @unique()
  password    String
  avatarUrl   String  @map("avatar_url")
  phoneNumber String  @map("phone_number")
  isValidated Boolean @map("is_validated")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  UserCall UserCall[]
  Sessions Session[]
  UserChat UserChat[]

  @@map("users")
}

model UserChat {
  id     String @id @default(uuid())
  userId String @map("user_id")
  chatId String @map("chat_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  User User @relation(fields: [userId], references: [id])
  Chat Chat @relation(fields: [chatId], references: [id])

  @@map("user_chats")
}

model Chat {
  id        String     @id @default(uuid())
  name      String?
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @updatedAt @map("updated_at")
  UserChat  UserChat[]

  @@map("chats")
}

model Message {
  id         String    @id @default(uuid())
  content    String
  chatId     String    @map("chat_id")
  senderId   String    @map("sender_id")
  receivedAt DateTime? @map("recived_at")
  readedAt   DateTime? @map("readed_at")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("messages")
}

model UserCall {
  id        String  @id @default(uuid())
  callId    String  @map("call_id")
  sessionId String  @map("session_id")
  isActive  Boolean @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  session Session @relation(fields: [sessionId], references: [id])
  call    Call    @relation(fields: [callId], references: [id])
  User    User?   @relation(fields: [userId], references: [id])
  userId  String?

  @@map("user_calls")
}

model Call {
  id String @id @default(uuid())

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  UserCall UserCall[]

  @@map("calls")
}

model Session {
  id       String @id @default(uuid())
  userId   String @map("user_id")
  socketId String @map("socket_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user     User       @relation(fields: [userId], references: [id])
  UserCall UserCall[]

  @@unique([socketId])
  @@map("sessions")
}
